#!/usr/bin/env node

/**
 * Module dependencies.
 */
var setting = require('../system/Setting').getInstance();
var app = require('../app');
var debug = require('debug')('nodejs-template:server');
//var http = require('http');

/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || '3000');
var port = normalizePort(process.env.PORT || setting.get('port'));
app.set('port', port);

var protocol = setting.get('protocol') == 'https' ? 'https' : 'http';

var server;
if (protocol == 'https') {
  var pem = setting.get('pem');
  const fs = require('fs');
  const privateKey = fs.readFileSync(pem.privateKey, 'utf8');
  const certificate = fs.readFileSync(pem.certificate, 'utf8');
  const ca = fs.readFileSync(pem.ca, 'utf8');
  const credentials = {
    key: privateKey,
    cert: certificate,
    ca: ca
  };
  var https = require('https');
  server = https.createServer(credentials, app);
} else {
  var http = require('http');
  server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io').listen(server);
app.setIO(io);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}

console.log('listening...' + protocol + '://' + getLocalAddress().ipv4[0].address + ':' + port);

function getLocalAddress() {
  var ifacesObj = {}
  ifacesObj.ipv4 = [];
  ifacesObj.ipv6 = [];
  var os = require('os');
  var interfaces = os.networkInterfaces();

  for (var dev in interfaces) {
    interfaces[dev].forEach(function (details) {
      if (!details.internal) {
        switch (details.family) {
          case "IPv4":
            ifacesObj.ipv4.push({
              name: dev,
              address: details.address
            });
            break;
          case "IPv6":
            ifacesObj.ipv6.push({
              name: dev,
              address: details.address
            })
            break;
        }
      }
    });
  }
  return ifacesObj;
};